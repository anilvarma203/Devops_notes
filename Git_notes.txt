GIT:(Global Information Tracker)
===
=>is a version control system.
=>Git is the tool used to track changes in your code
=>It will maintain multiple versions of the same file
=>It records every modification, addition, or deletion.
=> it runs: On your local machine (command line or GUI tools).

=>Git allows tracking of all code changes:
Who modified
When modified
What was modified
Why modified

=>Git stores this information in the commit history, which you can view using commands like git log or git show.

GITHUB:
=======
=>GitHub is a platform which is used to store all code at one place.
=>GitHub helps with integration, especially in collaborative environments.
=>it runs: On the web (github.com).

=>On GitHub, we can create repositories to store project code.
=>All developers can connect to the GitHub repository for code integration (making code integration very easy).

Environment Setup:
------------------
1.Create an account at github.com (free of cost).
2.Download & install Git client software: https://git-scm.com/downloads
3.Open Git Bash and configure your name and email:
    git config --global user.name "your-name"
    git config --global user.email "your-email"
Configuring name and email is a one-time process.

What is a GitHub Repository?:
------------------------------
=>A repository is a place to store project source code/files.
=>For each project, one GitHub repository is created.
=>Two types of repositories:
Public Repo: Anybody can see & you choose who can commit.
Private Repo: You choose who can see & who can commit.
Example:
Project Git Repo URL: https://github.com/ashokitschool/sbi_loans_app.git

Project team members use the repo URL to connect.

Git Architecture:
------------------
1.Working Tree
2.Staging Area
3.Local Repository
4.Central Repository (Remote)

->To see the version of git
  >git --version

Git Bash Commands:
-------------------
git init                                 # Initialize working tree
git status                               # Show working tree status
git add <file-name>                      # Add file to staging area
git add .                                # Add all files to staging area

git commit:
------------
git commit -m "msg"                      # Commit staged files to local repo
git commit -m "msg" filename             # commit specific file to local repo
git commit --amend -m “message”          # To edit the lastest commit message
git commit --amend --author “name <mail>" # To edit author for latest commit 
git commit --amend --no-edit             # To add staged files to commit the changes with prev commit 


git push                                 # Push local commits to remote repo

git restore <file>                       # Discard changes (files are in working tree)
git restore --staged <file>              # Unstage         (files are in staging area)
git rm --cached <file>                   # Stop tracking the file entirely


git log:
===========
git log                                  # To get commit history
git log -2                               # To get top 2 commit history
git log --follow --all filename          # To get full commits of a single file (how many commits done on a single file)
git log --oneline                        # To getonly commit id and commit msg 
git log --pretty=oneline                 # To get only full commit id and commit ms

git show:
---------
git show commit-id                       # To get detailed information about a  specific commit.(ex: commit msg,author,changes made) 
git show commit-id --stat                # To get history of a commit in stat format 
git show <commit-id> --name-only         # command to display only the files changed in a specific commit

=======
git log                                  # Show commit history
git show <commit-id> --name-only         # command to display only the files changed in a specific commit
git rm <file-name>                       # Remove a file
git clone <repo-url>                     # Download remote repo to local
git pull                                 # Get latest changes from remote repo
Note: After git rm, commit and push to delete file from remote repo.




